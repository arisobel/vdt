/*!
 * Bootstrap-select v1.14.0-beta3 (https://developer.snapappointments.com/bootstrap-select)
 *
 * Copyright 2012-2022 SnapAppointments, LLC
 * Licensed under MIT (https://github.com/snapappointments/bootstrap-select/blob/main/LICENSE)
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = factory(require('jquery'));
  } else {
    factory(root.jQuery);
  }
}(typeof self !== 'undefined' ? self : this, function ($) {

'use strict';

// Case insensitive contains search
$.extend($.expr.pseudos || $.expr[':'], {
  icontains: function (obj, index, meta) {
    return $(obj).text().toUpperCase().indexOf(meta[3].toUpperCase()) >= 0;
  }
});

var Selectpicker = function (element, options) {
  this.$element = $(element);
  this.$newElement = null;
  this.$button = null;
  this.$menu = null;
  this.options = options;
  this.selectpicker = {
    main: {},
    search: {},
    current: {},
    view: {},
    keydown: {
      keyHistory: '',
      resetKeyHistory: {
        start: function () {
          return setTimeout(function () {
            this.keyHistory = '';
          }.bind(this), 800);
        }
      }
    }
  };

  if (this.options.title === null) {
    this.options.title = this.$element.attr('title');
  }

  this.val = Selectpicker.prototype.val;
  this.render = Selectpicker.prototype.render;
  this.refresh = Selectpicker.prototype.refresh;
  this.setStyle = Selectpicker.prototype.setStyle;
  this.selectAll = Selectpicker.prototype.selectAll;
  this.deselectAll = Selectpicker.prototype.deselectAll;
  this.destroy = Selectpicker.prototype.destroy;
  this.remove = Selectpicker.prototype.remove;
  this.show = Selectpicker.prototype.show;
  this.hide = Selectpicker.prototype.hide;

  this.init();
};

Selectpicker.VERSION = '1.14.0-beta3';

Selectpicker.DEFAULTS = {
  noneSelectedText: 'Nothing selected',
  noneResultsText: 'No results matched {0}',
  countSelectedText: function (numSelected, numTotal) {
    return (numSelected == 1) ? "{0} item selected" : "{0} items selected";
  },
  maxOptionsText: function (numMax, selectType) {
    return [
      (numMax == 1) ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)',
      (numMax == 1) ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)'
    ][selectType];
  },
  selectAllText: 'Select All',
  deselectAllText: 'Deselect All',
  doneButton: false,
  doneButtonText: 'Close',
  multipleSeparator: ', ',
  styleBase: 'btn',
  style: 'btn-default',
  size: 'auto',
  title: null,
  selectedTextFormat: 'values',
  width: false,
  container: false,
  hideDisabled: false,
  showSubtext: false,
  showIcon: true,
  showContent: true,
  dropupAuto: true,
  header: false,
  liveSearch: false,
  liveSearchPlaceholder: null,
  liveSearchNormalize: false,
  liveSearchStyle: 'contains',
  actionsBox: false,
  iconBase: 'glyphicon',
  tickIcon: 'glyphicon-ok',
  showTick: false,
  template: {
    caret: '<span class="caret"></span>'
  },
  maxOptions: false,
  mobile: false,
  selectOnTab: false,
  dropdownAlignRight: false,
  windowPadding: 0,
  virtualScroll: 600,
  display: false,
  sanitize: true,
  sanitizeFn: null,
  whiteList: {
    'a': ['href', 'title'],
    'b': [],
    'br': [],
    'code': [],
    'div': [],
    'em': [],
    'hr': [],
    'i': [],
    'img': ['src', 'alt', 'title', 'width', 'height'],
    'p': [],
    'small': [],
    'span': [],
    'strong': [],
    'sub': [],
    'sup': []
  }
};

Selectpicker.prototype = {

  constructor: Selectpicker,

  init: function () {
    var that = this,
        id = this.$element.attr('id');

    this.selectpicker.main.map = {
      newIndex: {},
      originalIndex: {}
    };

    this.selectpicker.main.elements = [];
    this.selectpicker.main.data = [];
    this.selectpicker.search.elements = [];
    this.selectpicker.search.data = [];

    this.$element.addClass('bs-select-hidden');

    this.multiple = this.$element.prop('multiple');
    this.autofocus = this.$element.prop('autofocus');

    if (this.$element.parent().hasClass('input-group')) {
      this.$element.next('.input-group-addon, .input-group-btn').addClass('bootstrap-select-addon');
    }

    this.$button = this.createDropdown();
    this.createLi();
    this.$element.after(this.$newElement);

    if (id !== undefined) {
      this.$button.attr('data-id', id);
    }

    this.checkDisabled();
    this.clickListener();
    this.liveSearchListener();
    this.render();
    this.setStyle();
    this.setWidth();

    if (this.options.container) {
      this.selectPosition();
    }

    this.$menu.data('this', this);
    this.$newElement.data('this', this);
    if (this.options.mobile) this.mobile();

    this.$newElement.on({
      'hide.bs.dropdown': function (e) {
        that.$menuInner.attr('aria-expanded', false);
        that.$element.trigger('hide.bs.select', e);
      },
      'hidden.bs.dropdown': function (e) {
        that.$element.trigger('hidden.bs.select', e);
      },
      'show.bs.dropdown': function (e) {
        that.$menuInner.attr('aria-expanded', true);
        that.$element.trigger('show.bs.select', e);
      },
      'shown.bs.dropdown': function (e) {
        that.$element.trigger('shown.bs.select', e);
      }
    });

    if (this.$element[0].hasAttribute('required')) {
      this.$element.on('invalid.bs.select', function () {
        that.$button.addClass('bs-invalid').focus();

        that.$element.on('changed.bs.select shown.bs.select', function () {
          that.$button.removeClass('bs-invalid');
        });
      });
    }

    setTimeout(function () {
      that.createLi();
      that.render();
    });
  },

  createDropdown: function () {
    var inputGroupCompatibility = this.$element.parent().hasClass('input-group') && this.$element.next('.input-group-addon, .input-group-btn');
    var containerClass = this.multiple && this.options.actionsBox ? ' show-tick' : '';
    var header = this.multiple && this.options.header ? this.options.header : false;
    var searchbox = this.options.liveSearch ? '<div class="bs-searchbox"><input type="text" class="form-control" autocomplete="off"' + (this.options.liveSearchPlaceholder === null ? '' : ' placeholder="' + this.options.liveSearchPlaceholder + '"') + ' role="combobox" aria-label="Search" aria-controls="' + this.selectId + '" aria-autocomplete="list"></div>' : '';
    var actionsbox = this.multiple && this.options.actionsBox ? '<div class="bs-actionsbox"><div class="btn-group btn-group-sm btn-block"><button type="button" class="actions-btn bs-select-all btn btn-default">' + this.options.selectAllText + '</button><button type="button" class="actions-btn bs-deselect-all btn btn-default">' + this.options.deselectAllText + '</button></div></div>' : '';
    var donebutton = this.multiple && this.options.doneButton ? '<div class="bs-donebutton"><div class="btn-group btn-block"><button type="button" class="btn btn-sm btn-default">' + this.options.doneButtonText + '</button></div></div>' : '';

    var drop =
      '<div class="dropdown bootstrap-select' + containerClass + inputGroupCompatibility + '">' +
        '<button type="button" class="' + this.options.styleBase + ' dropdown-toggle' + (this.options.size ? ' ' + this.options.size : '') + '" ' + (this.options.display === 'static' ? 'data-display="static"' : '') + 'data-toggle="dropdown" role="combobox" aria-owns="' + this.selectId + '" aria-haspopup="listbox" aria-expanded="false">' +
          '<div class="filter-option">' +
            '<div class="filter-option-inner">' +
              '<div class="filter-option-inner-inner"></div>' +
            '</div> ' +
          '</div>' +
          '<span class="bs-caret">' +
            this.options.template.caret +
          '</span>' +
        '</button>' +
        '<div class="dropdown-menu" role="combobox">' +
          header +
          searchbox +
          actionsbox +
          '<div class="inner" role="listbox" id="' + this.selectId + '" tabindex="-1">' +
            '<ul class="dropdown-menu inner" ></ul>' +
          '</div>' +
          donebutton +
        '</div>' +
      '</div>';

    return $(drop);
  },

  setPositionData: function () {
    this.selectpicker.view.canHighlight = [];
    this.selectpicker.view.size = 0;
    this.selectpicker.view.firstVisibleIndex = 0;
    this.selectpicker.current = {
      data: [],
      elements: []
    };

    for (var i = 0; i < this.selectpicker.current.elements.length; i++) {
      var li = this.selectpicker.current.elements[i],
          index = li.getAttribute('data-original-index');

      if (index !== null) {
        this.selectpicker.current.data[index] = {
          element: li,
          index: i,
          originalIndex: parseInt(index, 10)
        };
      }
    }
  },

  createLi: function () {
    var that = this,
        _li = [],
        optID = 0,
        titleOption = document.createElement('option'),
        liIndex = -1; // increment liIndex whenever a new <li> element is created to ensure newIndex is set correctly

    // Helper functions
    var generateLI = function (content, index, classes, optgroup) {
      return '<li' +
        ((typeof classes !== 'undefined' & classes !== '') ? ' class="' + classes + '"' : '') +
        ((typeof index !== 'undefined' & index !== null) ? ' data-original-index="' + index + '"' : '') +
        ((typeof optgroup !== 'undefined' & optgroup !== null) ? 'data-optgroup="' + optgroup + '"' : '') +
        '>' + content + '</li>';
    };

    var generateA = function (text, classes, inline, tokens) {
      return '<a tabindex="0"' +
        (typeof classes !== 'undefined' ? ' class="' + classes + '"' : '') +
        (inline ? ' style="' + inline + '"' : '') +
        (that.options.liveSearchNormalize || tokens ? ' data-tokens="' + tokens + '"' : '') +
        ' role="option">' +
        text +
        '<span class="' + that.options.iconBase + ' ' + that.options.tickIcon + ' check-mark"></span>' +
        '</a>';
    };

    if (this.options.title && !this.multiple) {
      // this option doesn't create a new <li> element, but does add a new option at the start,
      // so liIndex is decreased to -1 to account for this
      liIndex--;
      titleOption.className = 'bs-title-option';
      titleOption.value = '';
      titleOption.innerHTML = this.options.title;
      this.$element[0].insertBefore(titleOption, this.$element[0].firstChild);

      // Set to undefined so the loop in clickListener skips titleOption - choose option clicks will still work on it
      var $titleOption = $(this.$element[0].options[this.$element[0].selectedIndex]);
      if ($titleOption.attr('selected') === undefined && this.$element[0].selectedIndex === 0) {
        this.$element[0].selectedIndex = -1;
      }
    }

    var $selectOptions = this.$element.find('option');

    $selectOptions.each(function (index) {
      var $this = $(this);

      liIndex++;

      if ($this.hasClass('bs-title-option')) return;

      // Get the class and text for the option
      var optionClass = this.className || '',
          inline = htmlEscape(this.style.cssText),
          text = $this.data('content') ? $this.data('content') : $this.html(),
          tokens = $this.data('tokens') ? $this.data('tokens') : null,
          subtext = typeof $this.data('subtext') !== 'undefined' ? '<small class="text-muted">' + $this.data('subtext') + '</small>' : '',
          icon = typeof $this.data('icon') !== 'undefined' ? '<span class="' + that.options.iconBase + ' ' + $this.data('icon') + '"></span> ' : '',
          $parent = $this.parent(),
          isOptgroup = $parent[0].tagName === 'OPTGROUP',
          isOptgroupDisabled = isOptgroup && $parent[0].disabled,
          isDisabled = this.disabled || isOptgroupDisabled;

      if (icon !== '' && isDisabled) {
        icon = '<span>' + icon + '</span>';
      }

      if (that.options.hideDisabled && (isDisabled && !isOptgroup || isOptgroupDisabled)) {
        liIndex--;
        return;
      }

      if (!$this.data('content')) {
        // Prepend any icon and append any subtext to the main text.
        text = icon + '<span class="text">' + text + subtext + '</span>';
      }

      if (isOptgroup && $this.data('divider') !== true) {
        if (that.options.hideDisabled && isDisabled) {
          if ($parent.data('allOptionsDisabled') === undefined) {
            var $options = $parent.children();
            $parent.data('allOptionsDisabled', $options.filter(':disabled').length === $options.length);
          }

          if ($parent.data('allOptionsDisabled')) {
            liIndex--;
            return;
          }
        }

        var optGroupClass = ' ' + $parent[0].className || '';

        if ($this.index() === 0) { // Is it the first option of the optgroup?
          optID += 1;

          // Get the opt group label
          var label = $parent[0].label,
              labelSubtext = typeof $parent.data('subtext') !== 'undefined' ? '<small class="text-muted">' + $parent.data('subtext') + '</small>' : '',
              labelIcon = $parent.data('icon') ? '<span class="' + that.options.iconBase + ' ' + $parent.data('icon') + '"></span> ' : '';

          label = labelIcon + '<span class="text">' + htmlEscape(label) + labelSubtext + '</span>';

          if (index !== 0 && _li.length > 0) { // Is it NOT the first option of the select && are there elements in the dropdown?
            liIndex++;
            _li.push(generateLI('', null, 'divider', optID + 'div'));
          }
          liIndex++;
          _li.push(generateLI(label, null, 'dropdown-header' + optGroupClass, optID));
        }

        if (that.options.hideDisabled && isDisabled) {
          liIndex--;
          return;
        }

        _li.push(generateLI(generateA(text, 'opt ' + optionClass + optGroupClass, inline, tokens), index, '', optID));
      } else if ($this.data('divider') === true) {
        _li.push(generateLI('', index, 'divider'));
      } else if ($this.data('hidden') === true) {
        _li.push(generateLI(generateA(text, optionClass, inline, tokens), index, 'hidden is-hidden'));
      } else {
        var showDivider = this.previousElementSibling && this.previousElementSibling.tagName === 'OPTGROUP';

        // if previous element is not an optgroup and hideDisabled is true
        if (!showDivider && that.options.hideDisabled) {
          showDivider = $(this.previousElementSibling).data('hidden') === true;
        }

        if (showDivider) {
          liIndex++;
          _li.push(generateLI('', null, 'divider', optID + 'div'));
        }

        _li.push(generateLI(generateA(text, optionClass, inline, tokens), index));
      }

      that.selectpicker.main.map.newIndex[index] = liIndex;
      that.selectpicker.main.map.originalIndex[liIndex] = index;
    });

    this.selectpicker.main.elements = _li;
    this.selectpicker.main.data = this.selectpicker.main.elements;

    this.selectpicker.current = this.selectpicker.main;
  },

  findLis: function () {
    return this.$menuInner.find('.inner > li');
  },

  render: function () {
    var that = this,
        notDisabled,
        $selectOptions = this.$element.find('option');

    //Update the view
    this.togglePlaceholder();

    this.tabIndex();

    this.$menuInner.find('li').remove();

    if (this.selectpicker.current.elements.length) {
      this.$menuInner.find('ul').html(this.selectpicker.current.elements.join(''));
    }

    // Convert HTML entities to HTML characters
    if (this.options.showIcon) {
      this.$menuInner.find('.dropdown-header').each(function () {
        $(this).prepend('<i class="' + that.options.iconBase + ' dropdown-caret"></i>');
      });
    }

    if (this.multiple && this.options.actionsBox) {
      this.$newElement.find('.bs-actionsbox').remove();
      this.$newElement.find('.dropdown-menu').prepend('<div class="bs-actionsbox"><div class="btn-group btn-group-sm btn-block"><button type="button" class="actions-btn bs-select-all btn ' + this.options.style + '">' + this.options.selectAllText + '</button><button type="button" class="actions-btn bs-deselect-all btn ' + this.options.style + '">' + this.options.deselectAllText + '</button></div></div>');
    }

    if (this.options.liveSearch) {
      this.$newElement.find('.bs-searchbox').remove();
      this.$newElement.find('.dropdown-menu').prepend('<div class="bs-searchbox"><input type="text" class="form-control" autocomplete="off"' + (this.options.liveSearchPlaceholder === null ? '' : ' placeholder="' + this.options.liveSearchPlaceholder + '"') + ' role="combobox" aria-label="Search" aria-controls="' + this.selectId + '" aria-autocomplete="list"></div>');
    }

    this.$menuInner = this.$newElement.find('.inner');
    this.$searchbox = this.$newElement.find('input');

    this.setPositionData();

    if ($selectOptions.length) {
      for (var i = 0; i < $selectOptions.length; i++) {
        var $option = $($selectOptions[i]);
        var thisData = this.selectpicker.main.map.newIndex[$option.index()];

        if (typeof thisData !== 'number') continue;

        var $li = $(this.selectpicker.current.elements[thisData]),
            $a = $li.find('a'),
            isSelected = $option.prop('selected'),
            isDisabled = $option.prop('disabled');

        if (isSelected) {
          this.setSelected(thisData, true);
        }

        if (isDisabled) {
          this.setDisabled(thisData, true);
        }
      }
    }

    this.moveHighlight();
  },

  /**
   * @param [style]
   * @param [status]
   */
  setStyle: function (style, status) {
    if (this.$element.attr('class')) {
      this.$newElement.addClass(this.$element.attr('class').replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi, ''));
    }

    var buttonClass = style ? style : this.options.style;

    if (status == 'add') {
      if (this.$button.hasClass('dropdown-toggle')) {
        this.$button.removeClass(this.$button.attr('class').replace(/\s*dropdown-toggle\s*/gi, ''));
      }
      this.$button.addClass(buttonClass + ' dropdown-toggle');
    } else if (status == 'remove') {
      this.$button.removeClass(buttonClass);
    } else {
      if (this.$button.hasClass('dropdown-toggle')) {
        this.$button.removeClass(this.$button.attr('class').replace(/\s*dropdown-toggle\s*/gi, ''));
      }
      this.$button.addClass(buttonClass + ' dropdown-toggle');
    }
  },

  liHeight: function (refresh) {
    if (!refresh && (this.options.size === false || Object.keys(this.selectpicker.current.data).length > this.options.size)) return;

    if (!this.selectpicker.view.scrollTop) {
      this.selectpicker.view.scrollTop = 0;
    }

    this.selectpicker.current.data = [];
    this.selectpicker.current.elements = [];

    for (var i = this.selectpicker.view.scrollTop, j = Math.ceil(this.options.size * 1.5); this.selectpicker.current.data.length < this.options.size && i < j; i++) {
      if (this.selectpicker.main.data[i]) {
        this.selectpicker.current.data.push(this.selectpicker.main.data[i]);
        this.selectpicker.current.elements.push(this.selectpicker.main.elements[i]);
      }
    }
  },

  setWidth: function () {
    var width = this.options.width;

    if (width === 'auto') {
      this.$newElement.css('width', 'auto');
    } else if (width === 'fit') {
      // Remove class to account for mobile
      this.$newElement.removeClass('fit-width');
      this.$newElement.css('width', '').addClass('fit-width');
    } else if (width) {
      // Remove class to account for mobile
      this.$newElement.removeClass('fit-width');
      this.$newElement.css('width', width);
    }
  },

  selectPosition: function () {
    this.$bsContainer = $('<div class="bs-container" />');

    var that = this,
        $container = $(this.options.container),
        pos,
        containerPos,
        actualHeight,
        getPlacement = function ($element) {
          var containerPosition = {},
              // fall back to dropdown's default display setting if display is not manually set
              display = that.options.display || (
                // Bootstrap 3 doesn't have $.fn.dropdown.Constructor.Default
                $.fn.dropdown.Constructor.Default ? $.fn.dropdown.Constructor.Default.display
                : false
              );

          that.$bsContainer.addClass($element.attr('class').replace(/form-control|fit-width/gi, '')).toggleClass('dropup', $element.hasClass('dropup'));
          pos = $element.offset();

          if (!$container.is('body')) {
            containerPos = $container.offset();
            containerPos.top += parseInt($container.css('borderTopWidth')) - $container.scrollTop();
            containerPos.left += parseInt($container.css('borderLeftWidth')) - $container.scrollLeft();
          } else {
            containerPos = { top: 0, left: 0 };
          }

          actualHeight = $element.hasClass('dropup') ? 0 : $element[0].offsetHeight;

          // Bootstrap 4+ uses Popper for menu positioning
          if (display === 'static') {
            containerPosition.top = pos.top + actualHeight - containerPos.top;
            containerPosition.left = pos.left - containerPos.left;
            containerPosition.width = 0; // recalculated in getPlacement() function and depandant on $element's width
          } else {
            containerPosition.top = 0;
            containerPosition.left = 0;
          }

          that.$bsContainer.css(containerPosition);
        };

    this.$button.on('click.bs.dropdown.data-api', function () {
      if (that.isDisabled()) {
        return;
      }

      getPlacement(that.$newElement);
      that.$bsContainer.appendTo(that.options.container).toggleClass('open', !that.$button.hasClass('open')).append(that.$menu);
    });

    $(window).off('resize' + this.eventSuffix + ' scroll' + this.eventSuffix).on('resize' + this.eventSuffix + ' scroll' + this.eventSuffix, function () {
      var isActive = that.$newElement.hasClass('open');
      if (isActive) getPlacement(that.$newElement);
    });

    this.$element.on('hide' + this.eventSuffix, function () {
      that.$menu.data('height', that.$menu.height());
      that.$bsContainer.detach();
    });
  },

  setSelected: function (index, selected, $lis) {
    if (!$lis) {
      this.togglePlaceholder();

      $lis = this.findLis().eq(this.selectpicker.main.map.newIndex[index]);
    }

    $lis.toggleClass('selected', selected).find('a').attr('aria-selected', selected);
  },

  setDisabled: function (index, disabled, $lis) {
    if (!$lis) {
      $lis = this.findLis().eq(this.selectpicker.main.map.newIndex[index]);
    }

    if (disabled) {
      $lis.addClass('disabled').children('a').attr('href', '#').attr('tabindex', -1);
    } else {
      $lis.removeClass('disabled').children('a').removeAttr('href').attr('tabindex', 0);
    }
  },

  isDisabled: function () {
    return this.$element[0].disabled;
  },

  checkDisabled: function () {
    if (this.isDisabled()) {
      this.$newElement.addClass('disabled');
      this.$button.addClass('disabled').attr('tabindex', -1).attr('aria-disabled', true);
    } else {
      if (this.$button[0].classList.contains('disabled')) {
        this.$newElement[0].classList.remove('disabled');
        this.$button[0].classList.remove('disabled');
      }

      if (this.$button.attr('tabindex') == -1 && !this.$element.data('tabindex')) {
        this.$button.removeAttr('tabindex');
      }

      this.$button.attr('aria-disabled', false);
    }
  },

  togglePlaceholder: function () {
    // much optimization, wow
    var hasValue = this.$element.val();
    this.$button.toggleClass('bs-placeholder', hasValue === null || hasValue === '' || (Array.isArray(hasValue) && hasValue.length === 0));
  },

  tabIndex: function () {
    if (this.$element.data('tabindex') !== this.$element.attr('tabindex') &&
      (this.$element.attr('tabindex') !== -98 && this.$element.attr('tabindex') !== '-98')) {
      this.$element.data('tabindex', this.$element.attr('tabindex'));
      this.$button.attr('tabindex', this.$element.data('tabindex'));
    }

    this.$element.attr('tabindex', -98);
  },

  clickListener: function () {
    var that = this,
        $menu = this.$menu;

    $menu.on('click', 'li a', function (e) {
      var $this = $(this),
          $li = $this.parent(),
          clickedIndex = that.selectpicker.main.map.originalIndex[$li.index()],
          prevValue,
          prevIndex,
          prevOption;

      // Don't close on multi choice menu
      if (that.multiple && that.options.maxOptions !== 1) {
        e.stopPropagation();
      }

      e.preventDefault();

      //Don't run if the select is disabled
      if (!that.isDisabled() && !$this.parent().hasClass('disabled')) {
        var $options = that.$element.find('option'),
            $option = $options.eq(clickedIndex),
            state = $option.prop('selected'),
            $optgroup = $option.parent('optgroup'),
            $optgroupOptions = $optgroup.find('option'),
            maxOptions = that.options.maxOptions,
            maxOptionsGrp = $optgroup.data('maxOptions') || false;

        if (clickedIndex !== undefined) {
          if (!that.multiple) {
            $options.prop('selected', false);
            $option.prop('selected', true);
            that.$menuInner.find('.selected').removeClass('selected').find('a').attr('aria-selected', false);
            that.setSelected(clickedIndex, true);
          } else {
            $option.prop('selected', !state);
            that.setSelected(clickedIndex, !state);
            that.togglePlaceholder();

            if (maxOptions !== false || maxOptionsGrp !== false) {
              var maxReached = maxOptions < $options.filter(':selected').length,
                  maxReachedGrp = maxOptionsGrp < $optgroupOptions.filter(':selected').length;

              if ((maxOptions && maxReached) || (maxOptionsGrp && maxReachedGrp)) {
                if (maxOptions && maxOptions == 1) {
                  $options.prop('selected', false);
                  $option.prop('selected', true);
                  that.$menuInner.find('.selected').removeClass('selected');
                  that.setSelected(clickedIndex, true);
                } else if (maxOptionsGrp && maxOptionsGrp == 1) {
                  $optgroupOptions.prop('selected', false);
                  $option.prop('selected', true);
                  var optgroupID = $li.data('optgroup');

                  that.$menuInner.find('[data-optgroup="' + optgroupID + '"]').removeClass('selected');
                  that.setSelected(clickedIndex, true);
                } else {
                  var maxOptionsText = typeof that.options.maxOptionsText === 'string' ? [that.options.maxOptionsText, that.options.maxOptionsText] : that.options.maxOptionsText,
                      maxOptionsArr = typeof maxOptionsText === 'function' ? maxOptionsText(maxOptions, maxOptionsGrp) : maxOptionsText,
                      maxTxt = maxOptionsArr[0].replace('{n}', maxOptions),
                      maxTxtGrp = maxOptionsArr[1].replace('{n}', maxOptionsGrp),
                      $notify = $('<div class="notify"></div>');
                  // If {var} is set in array, replace it
                  /** @deprecated */
                  if (maxOptionsArr[2]) {
                    maxTxt = maxTxt.replace('{var}', maxOptionsArr[2][maxOptions > 1 ? 0 : 1]);
                    maxTxtGrp = maxTxtGrp.replace('{var}', maxOptionsArr[2][maxOptionsGrp > 1 ? 0 : 1]);
                  }

                  $option.prop('selected', false);

                  that.$menu.append($notify);

                  if (maxOptions && maxReached) {
                    $notify.append($('<div>' + maxTxt + '</div>'));
                    that.$element.trigger('maxReached.bs.select');
                  }

                  if (maxOptionsGrp && maxReachedGrp) {
                    $notify.append($('<div>' + maxTxtGrp + '</div>'));
                    that.$element.trigger('maxReachedGrp.bs.select');
                  }

                  setTimeout(function () {
                    that.setSelected(clickedIndex, false);
                  }, 10);

                  $notify.delay(750).fadeOut(300, function () {
                    $(this).remove();
                  });
                }
              }
            }
          }

          if (!that.multiple || (that.multiple && that.options.maxOptions === 1)) {
            that.$button.focus();
          } else if (that.options.liveSearch) {
            that.$searchbox.focus();
          }

          // Trigger select 'change'
          if ((prevValue != that.$element.val() && that.multiple) || (prevIndex != that.$element.prop('selectedIndex') && !that.multiple)) {
            // $option.prop('selected') is current option state (selected/unselected). prevValue (if multiple) is the value of the select prior to being changed.
            changed_arguments = [clickedIndex, $option.prop('selected'), prevValue];
            that.$element
              .triggerNative('change');
          }
        }
      }
    });

    this.$menu.on('click', 'li.disabled a, .popover-title, .popover-title :not(.close)', function (e) {
      if (e && e.currentTarget == this) {
        e.preventDefault();
        e.stopPropagation();
        if (that.options.liveSearch && !$(e.target).hasClass('close')) {
          that.$searchbox.focus();
        } else {
          that.$button.focus();
        }
      }
    });

    this.$menuInner.on('click', '.divider, .dropdown-header', function (e) {
      e.preventDefault();
      e.stopPropagation();
      if (that.options.liveSearch) {
        that.$searchbox.focus();
      } else {
        that.$button.focus();
      }
    });

    this.$menu.on('click', '.bs-select-all', function (e) {
      var $this = $(this);

      e.preventDefault();
      that.selectAll();
      that.$element.triggerNative('change');
    });

    this.$menu.on('click', '.bs-deselect-all', function (e) {
      var $this = $(this);

      e.preventDefault();
      that.deselectAll();
      that.$element.triggerNative('change');
    });

    this.$menu.on('click', '.bs-donebutton', function (e) {
      var $this = $(this);

      e.preventDefault();
      that.$newElement.removeClass('open');
    });

    this.$element.on('change' + this.eventSuffix, function () {
      that.render();
    });

    // set  the original tabindex on the element to -98 and
    // have the button take the original tabindex.
    this.$button.on('keydown' + this.eventSuffix, function (e) {
      var $this = $(this),
          isToggle = that.isVirtual() ? that.$menuInner.hasClass('show') : $this.hasClass('open'),
          keyCode = e.which,
          selectIndex, // index of the currently selected option
          isArrowKey = /^(9|13|27|32|38|40)$/.test(keyCode),
          $searchbox = that.$newElement.find('.dropdown-menu input');

      selectIndex = that.$menuInner.find('.active').index();

      if (selectIndex < 0) {
        selectIndex = 0;
      }

      if (!isToggle && (isArrowKey || (keyCode >= 48 && keyCode <= 57) || (keyCode >= 96 && keyCode <= 105) || (keyCode >= 65 && keyCode <= 90))) {
        if (!that.options.container) {
          that.setSize();
          that.$newElement.addClass('open');
          isToggle = true;
        } else {
          that.$button.trigger('click');
        }
      }

      if (that.options.liveSearch) {
        if (/(^9$|27)/.test(keyCode) && isToggle) {
          that.$menu.find('.active').removeClass('active');
          if (keyCode == 9 && !e.shiftKey) {
            that.$element.trigger('focus');
          } else {
            if (keyCode == 27) {
              that.$button.trigger('focus');
            }
            that.$searchbox.trigger('focus');
          }
          that.$newElement.removeClass('open');
        } else if (keyCode == 40 && that.$searchbox.is(':focus')) {
          that.$menuInner.find('li').first().find('a').trigger('focus');
        }
      }

      if (isToggle) {
        if (/(38|40)$/.test(keyCode)) {
          var $lisVisible = that.$menuInner.find('li:not(.divider):not(.dropdown-header):not(.disabled):visible'),
              $activeElement;
          $activeElement = $lisVisible.eq(selectIndex).find('a');

          if (keyCode == 38) {
            if (selectIndex != 0) selectIndex--;
          } else {
            selectIndex++;
          }

          if (!$activeElement.length) {
            if (keyCode == 38) selectIndex = $lisVisible.length - 1; else selectIndex = 0;
          } else if (!$activeElement.is(':focus')) {
            $activeElement.trigger('focus');
          }

          var $listItem = $lisVisible.eq(selectIndex).find('a');
          $listItem.trigger('focus');
        } else if (!$searchbox.is(':focus')) {
          if (/^(13|32)$/.test(keyCode)) {
            var $focusedElement = that.$menuInner.find('.active a');
            if ($focusedElement.length) {
              $focusedElement.trigger('click');
              that.$button.trigger('focus');
            }
          } else if (keyCode == 27 && isToggle) {
            that.$button.trigger('click');
          } else if (keyCode == 9) {
            that.$newElement.removeClass('open');
          }
        }
      }
    });

    // Hide no results
    this.$menuInner.on('focus', 'a', function (e) {
      var $this = $(this),
          $parent = $this.parent();

      that.$menuInner.find('.active').not($parent).removeClass('active');
      $parent.addClass('active');
    });

    this.$element.on('focus' + this.eventSuffix, function () {
      that.$button.trigger('focus.bs.dropdown');
    });
  },

  liveSearchListener: function () {
    var that = this,
        noResults = '<li class="no-results"></li>';

    this.$button.on('click.bs.dropdown.data-api', function () {
      that.$menuInner.find('.active').removeClass('active');
      if (!!that.$searchbox.val()) {
        that.$searchbox.val('');
        that.render();
      }
    });

    this.$searchbox.on('click.bs.dropdown.data-api focus.bs.dropdown.data-api touchend.bs.dropdown.data-api', function (e) {
      e.stopPropagation();
    });

    this.$searchbox.on('input propertychange', function () {
      var searchValue = that.$searchbox.val();

      that.selectpicker.search.elements = [];
      that.selectpicker.search.data = [];

      if (searchValue) {
        var i,
            searchMatch = [],
            q = searchValue.toUpperCase(),
            cache = {},
            cacheArr = [],
            searchStyle = that.options.liveSearchStyle || 'contains',
            searchNormalize = that.options.liveSearchNormalize;

        if (searchNormalize) q = normalizeToBase(q);

        for (i = 0; i < that.selectpicker.main.data.length; i++) {
          var li = that.selectpicker.main.data[i];

          if (!cache[i]) {
            cache[i] = stringSearch(li, q, searchStyle, searchNormalize);
          }

          if (cache[i] && li !== undefined) {
            searchMatch.push(that.selectpicker.main.elements[i]);
            cacheArr.push(li);
          }
        }

        that.selectpicker.search.elements = searchMatch;
        that.selectpicker.search.data = cacheArr;
        that.selectpicker.current = that.selectpicker.search;
      } else {
        that.selectpicker.current = that.selectpicker.main;
      }

      that.render();
    });
  },

  val: function (value) {
    if (typeof value !== 'undefined') {
      if (this.options.liveSearch) {
        this.$searchbox.val('');
        this.render();
      }

      var prevValue = toInteger(this.$element.val()),
          prevIndex = this.$element.prop('selectedIndex');

      this.$element.val(value).trigger('change' + this.eventSuffix);

      if (prevValue != toInteger(this.$element.val()) || prevIndex != this.$element.prop('selectedIndex')) {
        this.$element.triggerNative('change');
      }

      return this.$element;
    } else {
      return this.$element.val();
    }
  },

  changeAll: function (status) {
    if (!this.multiple) return;
    if (typeof status === 'undefined') status = true;

    var $options = this.$element.find('option'),
        prevValue = toInteger(this.$element.val()),
        prevIndex = this.$element.prop('selectedIndex');

    this.$element.find('option:enabled').prop('selected', status);
    this.render();

    if (prevValue != toInteger(this.$element.val()) || prevIndex != this.$element.prop('selectedIndex')) {
      this.$element.triggerNative('change');
    }
  },

  selectAll: function () {
    return this.changeAll(true);
  },

  deselectAll: function () {
    return this.changeAll(false);
  },

  toggle: function (e) {
    e = e || window.event;

    if (e) e.stopPropagation();

    this.$button.trigger('click.bs.dropdown.data-api');
  },

  keydown: function (e) {
    if (this.$button.is(':disabled')) return;

    var $this = $(this),
        isToggle = this.isVirtual() ? this.$menuInner.hasClass('show') : $this.hasClass('open'),
        keyCode = e.which,
        selectIndex, // index of the currently selected option
        isArrowKey = /^(9|13|27|32|38|40)$/.test(keyCode),
        $searchbox = this.$newElement.find('.dropdown-menu input');

    selectIndex = this.$menuInner.find('.active').index();

    if (selectIndex < 0) {
      selectIndex = 0;
    }

    if (!isToggle && (isArrowKey || (keyCode >= 48 && keyCode <= 57) || (keyCode >= 96 && keyCode <= 105) || (keyCode >= 65 && keyCode <= 90))) {
      this.$button.trigger('click.bs.dropdown.data-api');
    }
  },

  hide: function () {
    this.$newElement.removeClass('open');
  },

  show: function () {
    this.$newElement.addClass('open');
  },

  remove: function () {
    this.$newElement.remove();
    this.$element.remove();
  },

  destroy: function () {
    this.$newElement.before(this.$element).remove();

    if (this.$bsContainer) {
      this.$bsContainer.remove();
    }

    this.$element
      .off(this.eventSuffix)
      .removeData('selectpicker')
      .removeClass('bs-select-hidden selectpicker');

    $(window).off(this.eventSuffix);
  }
};

// SELECTPICKER PLUGIN DEFINITION
// ==============================
function Plugin(option) {
  // get the args of the outer function..
  var args = arguments;
  // The arguments of the function are explicitly re-defined from the argument list, because the shift causes them
  // to get lost/corrupted in android 2.3 and IE9 #715 #775
  var _option = option;

  [].shift.apply(args);

  // if the first argument is a string, return
  // the method value for the first element
  // in the selection
  var value;
  var chain = this.each(function () {
    var $this = $(this);
    if ($this.is('select')) {
      var data = $this.data('selectpicker'),
          options = typeof _option == 'object' && _option;

      if (!data) {
        var dataAttributes = $this.data();

        for (var dataAttr in dataAttributes) {
          if (dataAttributes.hasOwnProperty(dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {
            delete dataAttributes[dataAttr];
          }
        }

        var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, dataAttributes, options);
        config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), dataAttributes.template, options.template);
        $this.data('selectpicker', (data = new Selectpicker(this, config)));
      } else if (options) {
        for (var i in options) {
          if (options.hasOwnProperty(i)) {
            data.options[i] = options[i];
          }
        }
      }

      if (typeof _option == 'string') {
        if (data[_option] instanceof Function) {
          value = data[_option].apply(data, args);
        } else {
          value = data.options[_option];
        }
      }
    }
  });

  if (typeof value !== 'undefined') {
    //noinspection JSUnusedAssignment
    return value;
  } else {
    return chain;
  }
}

var old = $.fn.selectpicker;
$.fn.selectpicker = Plugin;
$.fn.selectpicker.Constructor = Selectpicker;

// SELECTPICKER NO CONFLICT
// ========================
$.fn.selectpicker.noConflict = function () {
  $.fn.selectpicker = old;
  return this;
};

$(document)
  .off('keydown.bs.dropdown.data-api', '.bootstrap-select [data-toggle="dropdown"]')
  .on('keydown.bs.dropdown.data-api', '.bootstrap-select [data-toggle="dropdown"]', Selectpicker.prototype.keydown)
  .on('click.bs.dropdown.data-api', '.bootstrap-select [data-toggle="dropdown"]', function (e) {
    e.stopPropagation();
  });

// Utility functions
function htmlEscape(html) {
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var source = '(?:' + Object.keys(escapeMap).join('|') + ')';
  var testRegexp = new RegExp(source);
  var replaceRegexp = new RegExp(source, 'g');
  return html == null ? '' : ('' + html).replace(replaceRegexp, function (match) {
    return escapeMap[match];
  });
}

function toInteger(value) {
  return parseInt(value, 10) || 0;
}

// Polyfill for browsers with no classList support
// Remove in v2
if (!('classList' in document.createElement('_'))) {
  (function (view) {
    if (!('Element' in view)) return;
    var classListProp = 'classList', protoProp = 'prototype', elemCtrProto = view.Element[protoProp], objCtr = Object;
    var classListGetter = function () {
      var $elem = $(this);
      return {
        add: function (classes) {
          classes = Array.prototype.slice.call(arguments).join(' ');
          return $elem.addClass(classes);
        },
        remove: function (classes) {
          classes = Array.prototype.slice.call(arguments).join(' ');
          return $elem.removeClass(classes);
        },
        toggle: function (classes, force) {
          return $elem.toggleClass(classes, force);
        },
        contains: function (classes) {
          return $elem.hasClass(classes);
        }
      }
    };
    if (objCtr.defineProperty) {
      var classListPropDesc = {
        get: classListGetter,
        enumerable: true,
        configurable: true
      };
      try {
        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
      } catch (ex) { // IE 8 doesn't support enumerable:true
        if (ex.number == -0x7FF5EC54) {
          classListPropDesc.enumerable = false;
          objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
        }
      }
    } else if (objCtr[protoProp].__defineGetter__) {
      elemCtrProto.__defineGetter__(classListProp, classListGetter);
    }
  }(window));
}

// Case-insensitive searching
function stringSearch(li, searchString, method, normalize) {
  var stringTypes = [
    'content',
    'subtext',
    'tokens'
  ], searchSuccess = false;

  for (var i = 0; i < stringTypes.length; i++) {
    var stringType = stringTypes[i],
        string = li[stringType];

    if (string) {
      string = string.toString();

      // Strip HTML tags. Use jQuery if possible
      if (stringType === 'content') {
        string = $(string).text();
      } else {
        string = string.replace(/<[^>]+>/g, '');
      }

      if (normalize) string = normalizeToBase(string);
      string = string.toUpperCase();

      if (method === 'contains') {
        searchSuccess = string.indexOf(searchString) >= 0;
      } else {
        searchSuccess = string.startsWith(searchString);
      }

      if (searchSuccess) break;
    }
  }

  return searchSuccess;
}

function normalizeToBase(text) {
  var rExps = [
    {re: /[\xC0-\xC6]/g, ch: "A"},
    {re: /[\xE0-\xE6]/g, ch: "a"},
    {re: /[\xC8-\xCB]/g, ch: "E"},
    {re: /[\xE8-\xEB]/g, ch: "e"},
    {re: /[\xCC-\xCF]/g, ch: "I"},
    {re: /[\xEC-\xEF]/g, ch: "i"},
    {re: /[\xD2-\xD6]/g, ch: "O"},
    {re: /[\xF2-\xF6]/g, ch: "o"},
    {re: /[\xD9-\xDC]/g, ch: "U"},
    {re: /[\xF9-\xFC]/g, ch: "u"},
    {re: /[\xC7-\xE7]/g, ch: "c"},
    {re: /[\xD1]/g, ch: "N"},
    {re: /[\xF1]/g, ch: "n"}
  ];
  $.each(rExps, function () {
    text = text ? text.replace(this.re, this.ch) : '';
  });
  return text;
}

// set bootstrap-select's defaults once $ is available (avoids issues where
// the value of the option is calculated on import, but $ is available on
// use, such as with rollup)
$(function () {
  // See: https://github.com/silviomoreto/bootstrap-select/issues/1014
  $.fn.selectpicker.defaults = {
    noneSelectedText: 'Nothing selected',
    noneResultsText: 'No results matched {0}',
    countSelectedText: function (numSelected, numTotal) {
      return (numSelected == 1) ? "{0} item selected" : "{0} items selected";
    },
    maxOptionsText: function (numMax, selectType) {
      return [
        (numMax == 1) ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)',
        (numMax == 1) ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)'
      ][selectType];
    },
    selectAllText: 'Select All',
    deselectAllText: 'Deselect All',
    multipleSeparator: ', ',
    styleBase: 'btn',
    style: 'btn-default',
    size: 'auto',
    title: null,
    selectedTextFormat: 'values',
    width: false,
    container: false,
    hideDisabled: false,
    showSubtext: false,
    showIcon: true,
    showContent: true,
    dropupAuto: true,
    header: false,
    liveSearch: false,
    liveSearchPlaceholder: null,
    liveSearchNormalize: false,
    liveSearchStyle: 'contains',
    actionsBox: false,
    iconBase: 'glyphicon',
    tickIcon: 'glyphicon-ok',
    showTick: false,
    template: {
      caret: '<span class="caret"></span>'
    },
    maxOptions: false,
    mobile: false,
    selectOnTab: false,
    dropdownAlignRight: false,
    windowPadding: 0,
    virtualScroll: 600,
    display: false,
    sanitize: true,
    sanitizeFn: null,
    whiteList: {
      'a': ['href', 'title'],
      'b': [],
      'br': [],
      'code': [],
      'div': [],
      'em': [],
      'hr': [],
      'i': [],
      'img': ['src', 'alt', 'title', 'width', 'height'],
      'p': [],
      'small': [],
      'span': [],
      'strong': [],
      'sub': [],
      'sup': []
    }
  };
});

}));