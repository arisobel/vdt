/*!
 * Select2 4.0.13 - Simple implementation with tagging support
 * Copyright 2012-2017 Kevin Brown, Igor Vaynberg, and Select2 contributors
 * Released under the MIT license
 */
;(function (factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = function (root, jQuery) {
      if (jQuery === undefined) {
        if (typeof window !== 'undefined') {
          jQuery = require('jquery');
        } else {
          jQuery = require('jquery')(root);
        }
      }
      factory(jQuery);
      return jQuery;
    };
  } else {
    factory(jQuery);
  }
}(function (jQuery) {
  var $ = jQuery;
  
  // Select2 constructor
  function Select2(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Select2.DEFAULTS, options);
    this.id = this.generateId();
    this.init();
  }
  
  Select2.DEFAULTS = {
    width: '100%',
    placeholder: '',
    allowClear: false,
    tags: false,
    tokenSeparators: [',', ' '],
    language: {
      noResults: function() { return 'No results found'; },
      searching: function() { return 'Searching...'; }
    }
  };
  
  Select2.prototype.init = function() {
    var self = this;
    
    // Hide original select
    this.$element.hide();
    
    // Create container
    this.$container = $('<span class="select2 select2-container select2-container--default"></span>');
    this.$container.attr('id', 'select2-' + this.id + '-container');
    this.$container.css('width', this.options.width);
    
    // Create selection
    this.$selection = $('<span class="select2-selection select2-selection--single"></span>');
    this.$rendered = $('<span class="select2-selection__rendered"></span>');
    this.$arrow = $('<span class="select2-selection__arrow"><b></b></span>');
    
    this.$selection.append(this.$rendered);
    this.$selection.append(this.$arrow);
    this.$container.append(this.$selection);
    
    // Create dropdown
    this.$dropdown = $('<span class="select2-dropdown select2-dropdown--below"></span>');
    this.$search = $('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="textbox" /></span>');
    this.$results = $('<span class="select2-results"><ul class="select2-results__options" role="tree"></ul></span>');
    
    this.$dropdown.append(this.$search);
    this.$dropdown.append(this.$results);
    this.$dropdown.hide();
    
    // Insert after original element
    this.$element.after(this.$container);
    $('body').append(this.$dropdown);
    
    // Bind events
    this.bindEvents();
    
    // Initialize selection
    this.updateSelection();
  };
  
  Select2.prototype.generateId = function() {
    var id = this.$element.attr('id');
    if (!id) {
      id = 'select2-' + Math.random().toString(36).substring(2, 15);
    }
    return id;
  };
  
  Select2.prototype.bindEvents = function() {
    var self = this;
    
    // Click on selection
    this.$selection.on('click', function(e) {
      e.preventDefault();
      self.toggleDropdown();
    });
    
    // Search input
    this.$search.find('.select2-search__field').on('input', function() {
      self.search($(this).val());
    });
    
    // Click on result
    this.$results.on('click', '.select2-results__option', function(e) {
      e.preventDefault();
      var data = $(this).data('data');
      if (data) {
        self.selectOption(data);
      }
    });
    
    // Click outside to close
    $(document).on('click', function(e) {
      if (!$(e.target).closest(self.$container).length && !$(e.target).closest(self.$dropdown).length) {
        self.close();
      }
    });
    
    // Keyboard events
    this.$search.find('.select2-search__field').on('keydown', function(e) {
      if (e.which === 13) { // Enter key
        e.preventDefault();
        var searchTerm = $(this).val().trim();
        if (searchTerm && self.options.tags) {
          // Check if option with this text already exists
          var existingOption = self.$element.find('option').filter(function() {
            return $(this).text().toLowerCase() === searchTerm.toLowerCase();
          });
          
          if (existingOption.length === 0) {
            // Select the new tag directly
            self.selectOption({
              id: searchTerm,
              text: searchTerm,
              newTag: true
            });
          } else {
            // Select existing option
            self.selectOption({
              id: existingOption.val(),
              text: existingOption.text()
            });
          }
        }
      } else if (e.which === 27) { // Escape key
        self.close();
      }
    });
  };
  
  Select2.prototype.toggleDropdown = function() {
    if (this.isOpen()) {
      this.close();
    } else {
      this.open();
    }
  };
  
  Select2.prototype.open = function() {
    if (this.isOpen()) return;
    
    this.$container.addClass('select2-container--open');
    this.$dropdown.show();
    this.positionDropdown();
    this.$search.find('.select2-search__field').focus();
    this.search('');
  };
  
  Select2.prototype.close = function() {
    if (!this.isOpen()) return;
    
    this.$container.removeClass('select2-container--open');
    this.$dropdown.hide();
    this.$search.find('.select2-search__field').val('');
  };
  
  Select2.prototype.isOpen = function() {
    return this.$container.hasClass('select2-container--open');
  };
  
  Select2.prototype.positionDropdown = function() {
    var offset = this.$container.offset();
    var height = this.$container.outerHeight();
    
    this.$dropdown.css({
      position: 'absolute',
      top: offset.top + height + 'px',
      left: offset.left + 'px',
      width: this.$container.outerWidth() + 'px',
      'z-index': 1051
    });
  };
  
  Select2.prototype.search = function(term) {
    var self = this;
    var $options = this.$results.find('.select2-results__options');
    $options.empty();
    
    var hasResults = false;
    
    // Search through existing options
    this.$element.find('option').each(function() {
      var $option = $(this);
      var text = $option.text();
      var value = $option.val();
      
      if (!term || text.toLowerCase().indexOf(term.toLowerCase()) !== -1) {
        var $result = $('<li class="select2-results__option" role="treeitem"></li>');
        $result.attr('aria-selected', 'false');
        $result.text(text);
        $result.data('data', {
          id: value,
          text: text
        });
        $options.append($result);
        hasResults = true;
      }
    });
    
    // If no results and tags are enabled, show option to create new
    if (!hasResults && term && this.options.tags) {
      var $createOption = $('<li class="select2-results__option select2-results__option--highlighted" role="treeitem"></li>');
      $createOption.attr('aria-selected', 'false');
      $createOption.html('Create "<strong>' + this.escapeHtml(term) + '</strong>"');
      $createOption.data('data', {
        id: term,
        text: term,
        newTag: true
      });
      $options.append($createOption);
    } else if (!hasResults) {
      var $noResults = $('<li class="select2-results__message">' + this.options.language.noResults() + '</li>');
      $options.append($noResults);
    }
  };
  
  Select2.prototype.selectOption = function(data) {
    if (data.newTag) {
      // Add new option to select
      var $newOption = $('<option></option>');
      $newOption.val(data.id);
      $newOption.text(data.text);
      $newOption.attr('selected', 'selected');
      this.$element.append($newOption);
      
      // Trigger custom event
      this.$element.trigger('select2:select', {
        data: data
      });
    } else {
      // Select existing option
      this.$element.val(data.id);
      this.$element.trigger('change');
    }
    
    this.updateSelection();
    this.close();
  };
  
  Select2.prototype.updateSelection = function() {
    var selectedOption = this.$element.find('option:selected');
    var text = selectedOption.length ? selectedOption.text() : this.options.placeholder;
    this.$rendered.text(text);
  };
  
  Select2.prototype.escapeHtml = function(text) {
    return $('<div>').text(text).html();
  };
  
  Select2.prototype.destroy = function() {
    this.$container.remove();
    this.$dropdown.remove();
    this.$element.show();
    this.$element.removeData('select2');
  };
  
  // jQuery plugin
  $.fn.select2 = function(options) {
    if (typeof options === 'string') {
      var method = options;
      var args = Array.prototype.slice.call(arguments, 1);
      
      return this.each(function() {
        var instance = $(this).data('select2');
        if (instance && typeof instance[method] === 'function') {
          instance[method].apply(instance, args);
        }
      });
    }
    
    return this.each(function() {
      if (!$(this).data('select2')) {
        var instance = new Select2(this, options);
        $(this).data('select2', instance);
      }
    });
  };
  
  // Default options
  $.fn.select2.defaults = Select2.DEFAULTS;
  
  return Select2;
}));