# -*- coding: utf-8 -*-
# tente algo como
def index():
    response.title = "Shiurim"
    categ = request.vars.categ or None
    paletrante = request.vars.palestr or None
    so_tops = True if request.vars.so_tops else False # se quiser apenas a listagem de tops
    eh_categ = True if request.vars.categ else False # se quiser apenas a listagem de tops
    eh_palest = True if paletrante else False # se quiser apenas a listagem de tops
    query = db.media_video


    # situação default
    searchable = True
    editable = True
    create = True
    cabec = "Lista de Shiurim - Geral"
    campos = [db.media_video.titulo,
                db.media_video.palestrante,
                db.media_video.categoria,
                db.media_video.eh_top,
                db.media_video.tipo_media,
                db.media_video.aprovacao,
                db.media_video.minutes,
                db.media_video.tags,
                db.media_video.lancado,
              ]


    if so_tops:
        searchable = False
        editable = False
        create = False
        query = (db.media_video.eh_top == True)
        campos = [db.media_video.titulo,
                    db.media_video.tipo_media,
                    db.media_video.categoria,
                    db.media_video.tags,
                    db.media_video.palestrante,

                  ]
        cabec = "Tops"


    if eh_categ:

        response.title = "Categoria {}".format(categ)
        searchable = False
        editable = False
        create = False
        query = (db.media_video.categoria == categ)

        categoria_db = db(db.categoria.id==categ).select().first()

        cabec = "Categoria {}".format(categoria_db['nome'].title())


        campos = [db.media_video.titulo,
                    db.media_video.tipo_media,
                    db.media_video.categoria,
                    db.media_video.tags,
                    db.media_video.palestrante,

                  ]
    if eh_palest:

        searchable = False
        editable = False
        create = False
        query = (db.media_video.palestrante == paletrante)
        palestrante_db = db(db.palestrante.id==paletrante).select().first()
        cabec = "{}".format(palestrante_db['nome'].title())
        campos = [db.media_video.titulo,
                    db.media_video.tipo_media,
                    db.media_video.categoria,
                    db.media_video.tags,
                    db.media_video.palestrante,

                  ]
        #db.palestrante.format  ="$(id)s"
        #db.media_video.palestrante.represent = lambda value, row: SPAN(IMG(_src=URL('default','download', args=str(value or "-|-").split("|")[1]), _class="img-circle", _width="60", _HEIGHT="80"  ), SPAN(value, _class="hidden-xs d-none d-sm-inline"))



    links = [
               dict(header='Play', body=lambda row: A(TAG.i(_class="icon icon-play bi bi-play"), _href =URL('toca','index',args=row.id), _class="btn  btn-default btn-secondary")),
               dict(header='Views', body=lambda row: SPAN(conta_views(row.id), _style="display: inline-block; width: 100%; text-align: center;"))

            ]

    form = SQLFORM.grid(query,
    	fields=campos,

        buttons_placement='left', # Botões a esquerda
        deletable = False,
        details=False, #desabilita a visualização
        searchable = searchable,
        editable = editable,
        create = create,
        #selectable=lambda ids : redirect(URL('artigo', 'action_multiple', vars=dict(id=ids))),
        #selectable_text="Selecione",
        headers = {'media_video.titulo': 'Nome do Shiur', 'media_video.tipo_media': 'Media'},
        orderby=[~db.media_video.lancado,~db.media_video.titulo],
        links = links,
        links_placement = 'left',
        #field_id= db.ARTIGOS.COD_ARTIGO,
        #field_id= ' ',
        maxtextlengths={'media_video.titulo':50, 'media_video.categoria':50,} ,
        showbuttontext=False, # Exibe os botões
        _class='web2py_grid',
    	csv=False)

    if request.args(-2) == 'new':
        redirect(URL('media','edit', args=0))

    elif request.args(-3) == 'edit':
       #redirect(URL('artigo_editar', vars= {'cod' : id_artigo} ))
       #redirect(URL('artigo_editar', args=[request.args(-1)]))
       idd = request.args(-1)
       redirect(URL('media','edit', args=idd ))

    return dict(
                form=form,
                so_tops=so_tops,
                cabec = cabec,
               )


def cards():
    response.title = "Shiurim"
    categ = request.vars.categ or None
    paletrante = request.vars.palestr or None
    so_tops = True if request.vars.so_tops else False # se quiser apenas a listagem de tops
    eh_categ = True if request.vars.categ else False # se quiser apenas a listagem de tops
    eh_palest = True if paletrante else False # se quiser apenas a listagem de tops

    query = (db.media_video.eh_top == True)
    campos = [db.media_video.titulo,
                db.media_video.tipo_media,
                db.media_video.categoria,
                db.media_video.tags,
                db.media_video.id,
                db.media_video.resenha,
                db.palestrante.nome,
                db.palestrante.foto,

              ]
    lista = db(query).select(*campos, left=[db.palestrante.on(db.media_video.palestrante==db.palestrante.id)])

    return dict(lista=lista)

#=======================================
# lista de Tops
#
#=======================================
def lista():
    import random
    response.title = "TOP Shiurim"
    if request.args(0) == "short":
        response.title = "Short Shiurim"
    categ = request.vars.categ or None
    paletrante = request.vars.palestr or None
    so_tops = True if request.vars.so_tops else False # se quiser apenas a listagem de tops
    eh_categ = True if request.vars.categ else False # se quiser apenas a listagem de tops
    eh_palest = True if paletrante else False # se quiser apenas a listagem de tops

    if request.vars.l2:
        response.view ='media/lista2.html'
    else:
        response.view ='media/lista_tops.html'

    lista_selecao_semana = [r['media_id'] for r in  db(db.media_tag.tag_id==11).select()]

    query = (db.media_video.eh_top == True)|(db.media_video.id.belongs(lista_selecao_semana))

    if request.args(0):
        if request.args(0)=="short":
            query &= (db.media_video.minutes<=20)
    else:
        query &= (db.media_video.minutes>20)

    campos = [db.media_video.titulo,
                db.media_video.tipo_media,
                db.media_video.categoria,
                db.categoria.nome,
                db.media_video.tags,
                db.media_video.resenha,
                db.media_video.palestrante,
                db.media_video.tipo_media,
                db.media_video.tags,
                db.media_video.minutes,
                db.media_video.tag_chave,
                db.categoria.id,
                db.categoria.imagem,
                db.categoria.cor_fundo,
                db.categoria.fundo,
                db.media_video.id,
               db.palestrante.nome,
               db.palestrante.foto,

              ]
    lista = db(query).select(*campos,
                             left=[db.palestrante.on(db.media_video.palestrante==db.palestrante.id),
                                   db.categoria.on(db.media_video.categoria==db.categoria.id)
                                  ]).sort(lambda row: random.random())

    lista_ids_media = [r['media_video']['id'] for r in lista]

    lista_tags = db(db.media_tag.media_id.belongs(lista_ids_media)).select()

    dict_tags_nomes = {r['id']:r['nome'] for r in db(db.tag.id>0).select()}

    dict_tags = {}
    for tag in lista_tags:
        media_id = tag['media_id']
        if media_id not in dict_tags:
            dict_tags[media_id] = []
        dict_tags[media_id].append(dict_tags_nomes.get(tag['tag_id'],"-"))

    tipos_media = [("L","Link"),("V","Video"),("YT","Youtube"),("A","Audio"),("S","Spotify")]
    icons_media = [("L","link"),("V","camera-video-fill"),("YT","youtube"),("A","mic-fill"),("S","spotify")]

    dict_tipos_media =  {chave: valor for chave, valor in tipos_media}
    dict_icons_media =  {chave: valor for chave, valor in icons_media}

    dic_icon = {}
    for k,v in dict_icons_media.items():
        dic_icon[k] = CAT(SPAN(TAG.i(_class="bi bi-{}".format(dict_icons_media.get(k,"-"))), SPAN(dict_tipos_media.get(k,'-'),_class="ml-3 hidden-xs d-none d-sm-inline") ))


    return dict(lista=lista,
                dic_icon=dic_icon,
                dict_tags=dict_tags,
                lista_tags=lista_tags,
                lista_ids_media=lista_ids_media)





#=====================================================================
# funcao de criação e edição do conteúdo
#=====================================================================
@auth.requires_login()
def edit():
    user_ip = request.client
    # define os botões da aula / video
    buttons = [
        TAG.button('Salvar',_type="submit",_class = "btn btn-info pull-right"),
        A('Voltar a lista',_href=URL('media','index'),_class = "btn btn-default pull-right"),
        ]

    try:
        idd = int(request.args(0) or "0")
    except:
        idd = 0

    #carrega grupos
    grupos = db(db.wa_group.id>0).select()


    if idd:

        form_video_editar = SQLFORM(db.media_video,idd,
                                          buttons =buttons,
                                          submit_button='Alterar',
                                          _id='form_video_editar' ,
                                          field_id='id'
                                          #field_id='COD_ARTIGO'
                                          )

        video = db(db.media_video.id==idd).select().first()
        if video.arquivo:
            form_video_editar.vars.url_arquivo = video.arquivo
        else:
            form_video_editar.vars.arquivo = 'Nenhuma imagem disponível'

        form_legendas = LOAD(c='media',
                     f='legendas_listar',
                     vars={'idd':idd},
                     content='Aguarde, carregando...',
                     target='lista_legendas',
                     ajax=True
                     )

        form_posts = LOAD(c='media',
                     f='postagens_listar',
                     vars={'idd':idd},
                     content='Aguarde, carregando...',
                     target='lista_postagens',
                     ajax=True
                     )


    else:
        form_video_editar = SQLFORM(db.media_video,
                                          buttons =buttons,
                                          submit_button='Incluir',
                                          field_id='id',
                                          #field_id='COD_ARTIGO',
                                          _id='form_video_editar')
        form_video_editar.vars.url_arquivo = ""
        form_legendas = "Primerio cadastre a Media"

    # coloca o campo resenha com 3 linhas
    form_video_editar.element(_name='resenha')['_rows'] = '3'

    #form_video_editar.custom.widget.arquivo = lambda field, value: SQLFORM.widgets.upload.widget(field, value, _accept='video/*')
    #form_video_editar.custom.widget.arquivo = lambda field, value, current: SQLFORM.widgets.upload.widget(field, value, _accept='video/*', uploadfolder=URL('uploads'))
    if form_video_editar.process().accepted:
        video_id = form_video_editar.vars.id
        session.flash = 'Efetuado com sucesso! ID {}'.format(video_id)
        return redirect(URL('media','edit', args=[video_id]))
        '''
        artigo_cod = form_artigo_editar.vars.f_codigo_art
        artigo_desc = form_artigo_editar.vars.f_descricao_art
        '''

    elif form_video_editar.errors: 
        response.flash = 'Erro no Cadastro! %s  ' % (", \n".join(form_video_editar.errors))

    return dict(form_video_editar=form_video_editar, 
                form_legendas=form_legendas, 
                user_ip=user_ip, 
                grupos=grupos, 
                form_posts=form_posts)


def legendas_listar():

    id_legenda = request.vars.idd or "0"

    query = db.legenda.media_video==id_legenda
    db.legenda.media_video.default = id_legenda

    db.legenda.media_video.writable = False
    db.legenda.media_video.readable = False


    form_caps = SQLFORM.grid(query,
                             args=[id_legenda],
                             csv=False,
                             showbuttontext=False,
                             user_signature=False,
                             searchable=False)

    return dict(form_caps=form_caps)


# BH 2025-01-29 -- listagem das postagens das midias nos grupos

def postagens_listar():

    id_video = request.vars.idd or "0"

    query = db.media_post.media_id==id_video
    db.media_post.media_id.default = id_video

    db.media_post.media_id.writable = False
    db.media_post.media_id.readable = False


    form_posts = SQLFORM.grid(query,
                             args=[id_video],
                             csv=False,
                             showbuttontext=False,
                             user_signature=False,
                             searchable=False)

    return dict(form_posts=form_posts)


def redir_top():

    id_categ = request.args(0)

    if id_categ:
        top_categ = db((db.media_video.categoria==id_categ)&(db.media_video.eh_top==True)).select(orderby=~db.media_video.id).first()
        if top_categ:
            id_media = top_categ['id']
            return redirect(URL('toca','index', args=[id_media]))

        else:
            return redirect(URL('media','index', vars={'categ':id_categ}))
    else:

        return redirect(URL('default','index'))

#============================================
# receber comentário
#============================================
def comentar():
    ret = 'nada'
    if request.vars:
        nome = request.post_vars.nome
        comentario = request.post_vars.coment
        media_id = request.args(0)

        ret = db.coment_media.validate_and_insert(media_id=media_id,
                                                  user_ip=request.client,
                                                 comentario=comentario,
                                                 nome_user=nome
                                                 )


    return ret


#==================================
# 2024-02-20 - sobel.ari
# contador de visualizações
#==================================

def views_count():
    media_id = request.args(0)
    id_view = 0
    if media_id:
        id_view = db.media_view.insert(media_id=media_id)

    return id_view


#==================================
# 2024-02-20 - sobel.ari
# contador de visualizações
#==================================

def shiurim():
    response.title = "Shiurim"
    categ = request.vars.categoria or None
    paletrante = request.vars.palestr or None
    so_tops = True if request.vars.so_tops else False # se quiser apenas a listagem de tops
    eh_categ = True if request.vars.categoria else False # se quiser apenas a listagem de tops
    eh_palest = True if paletrante else False # se quiser apenas a listagem de tops
    var = request.vars.var

    query = (db.media_video.aprovacao == "A")

    minutos = request.vars.minutos

    # controla a minutagem
    minuto_max = 0
    min_minuto = 0
    if minutos:
        if "-" in minutos:
            min_minuto, minuto_max = minutos.split("-")

    if not minuto_max:
        max_minuto = db.media_video.minutes.max()
        db_max_minuto = db(query).select( max_minuto.with_alias("maxminuto")).first()

        minuto_max = 50
        if db_max_minuto:
            minuto_max = db_max_minuto["maxminuto"]


    db_categorias = db(db.categoria).select()
    db_tags = db(db.tag).select()
    db_palestrantes = db(db.palestrante).select()

    if var:
        if var == "1":
            response.view = "media/shiurim1.html"

    #filtros
    minuto = request.vars.minutos or []
    if minuto:
        query &= (db.media_video.minutes>=min_minuto)
        query &= (db.media_video.minutes<=minuto_max)




    categs = request.vars.categ or []
    if categs:
        if isinstance(categs, list):
            query &= (db.media_video.categoria.belongs(categs))
        else:
            query &= (db.media_video.categoria==categs)
            categs = [categs]

    palests = request.vars.palest or []
    if palests:
        if isinstance(palests, list):
            query &= (db.media_video.palestrante.belongs(palests))
        else:
            query &= (db.media_video.palestrante==palests)
            palests = [palests]

    tags = request.vars.tag or []
    if tags:
        if isinstance(tags, list):
            # tags = [int(tag.replace("|","")) for tag in tags
            videos_tags = db(db.media_tag.tag_id.belongs(tags)).select()

        else:
            videos_tags = db(db.media_tag.tag_id==tags).select()
            #query &= (db.media_video.tags==tags)
            tags = [tags]

        videos_list = [r.media_id for r in videos_tags]
        query &= (db.media_video.id.belongs(videos_list))

    desde = request.vars.desde or ""
    if desde:
        formato = "%d-%m-%Y"
        dt_desde = datetime.strptime(desde, formato)
        query &= (db.media_video.lancado>=dt_desde)


    search = request.vars.search
    if search:
        query &= ((db.media_video.titulo.contains(search)))

    # situação default
    cabec = "Lista de Shiurim - Geral"
    campos = [db.media_video.titulo,
                db.media_video.palestrante,
                db.media_video.categoria,
                db.media_video.eh_top,
                db.media_video.tipo_media,
                db.media_video.aprovacao,
                db.media_video.tags,
                db.media_video.lancado,
                db.media_video.minutes,
                db.media_video.id,
                db.palestrante.foto,
                db.palestrante.nome,
                db.categoria.nome,
              ]


    if so_tops:
        query = (db.media_video.eh_top == True)
        campos = [db.media_video.titulo,
                    db.media_video.tipo_media,
                    db.media_video.categoria,
                    db.media_video.tags,
                    db.media_video.palestrante,
                    db.palestrante.foto,

                  ]
        cabec = "Tops"


    if eh_categ:

        response.title = "Categoria {}".format(categ)
        query = (db.media_video.categoria == categ)

        categoria_db = db(db.categoria.id==categ).select().first()

        cabec = "Categoria {}".format(categoria_db['nome'].title())


        campos = [db.media_video.titulo,
                    db.media_video.tipo_media,
                    db.media_video.categoria,
                    db.media_video.tags,
                    db.media_video.palestrante,
                    db.palestrante.foto,

                  ]
    if eh_palest:

        query = (db.media_video.palestrante == paletrante)
        palestrante_db = db(db.palestrante.id==paletrante).select().first()
        cabec = "{}".format(palestrante_db['nome'].title())
        campos = [db.media_video.titulo,
                    db.media_video.tipo_media,
                    db.media_video.categoria,
                    db.media_video.tags,
                    db.media_video.palestrante,
                    db.palestrante.foto,

                  ]


    listagem = db(query).select(*campos ,
                              left=[db.palestrante.on(db.media_video.palestrante==db.palestrante.id),
                                   db.categoria.on(db.media_video.categoria==db.categoria.id)
                                  ])

    ult_sql = db._lastsql[0]

    return dict(listagem=listagem,
                cabec=cabec,
                db_categorias=db_categorias,
                db_palestrantes=db_palestrantes,
                db_tags=db_tags,
                ult_sql=ult_sql,
                categs=categs,
                tags=tags,
                palests=palests,
                minuto_max=minuto_max,
                min_minuto=min_minuto,
                search=search,
               )

def chosen():
    return dict()
