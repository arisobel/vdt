{{extend 'layout.html'}}


<h1>VDT Player

    {{ if auth.has_membership("admin"):}}
        <small>
           <a class="btn  btn-default btn-secondary" href="{{=URL('media','edit',args=[request.args(0)], user_signature=True)}}" previewlistener="true"><i class="icon icon-pencil bi bi-pencil"></i></a>
        </small>
    {{ pass }}

</h1>
<!DOCTYPE html>

{{block head}}
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Player with Subtitles</title>
    <style>
        #video-container {
            display: flex;
            flex-direction: column;


        }

        #subtitles {
            word-wrap: break-word; /* Permite que o texto quebre em várias linhas */
            white-space: normal;
        }

        body {
            font-size: 16px; /* Tamanho base da fonte para o corpo (pode ser ajustado) */
        }

        .outlined-text {
            font-size: 24px;
            font-family: Arial, sans-serif;
            color: #fff; /* Cor do texto */
            text-shadow: -1px -1px 0 #000,
                         1px -1px 0 #000,
                        -1px 1px 0 #000,
                         1px 1px 0 #000; /* Sombra para simular o contorno */
        }

        .aumentar-fonte {
            font-size: 3em; /* Aumenta o tamanho da fonte em 1.5 vezes o tamanho base */
        }

            {{ if tipo_media == 'V' : }}

                    .mae {
                        position: relative;
                    }

                    .filha {
                        position: absolute;
                        width: auto;
                        max-width: 100%;
                        height: auto;
                        max-height: 100%;
                        cursor: move;
                        /*border: 1px solid #000;*/
                    }


            {{ pass }}


    </style>

    <link rel="stylesheet" href="{{=URL('static','css/vdt/style.css')}}">


{{end}}
{{block page_js}}
    <script src="{{=URL('static','js/vdt/voting.js')}}"></script>
{{end page_js}}
<!--
{{=tipo_media}}<br>
{{=url_arquivo}}<br>
{{=link}}
-->

<span id="contou"></span>

<div class="row">

    <div class="col-lg-5 col-md-5  col-sm-12  col-xs-12">

        {{ if tipo_media in ('A', 'V'):}}



        <div id="video-container">


            {{ if tipo_media == 'V':}}
            <video id="myVideo" width="100%" height="360"   class="mae"  controls>
            {{ elif tipo_media == 'A' : }}
            <audio id="myVideo" width="100%" height="360"   class="mae"  controls>
            {{ pass}}
                <!--<source src="{{=URL('static','teste/video_01.mp4')}}" type="video/mp4">-->


                <!--<source src="{{=URL('default','download', args=url_arquivo)}}" type="video/mp4">-->
                <source src="{{=URL('toca','stream_video',args=[url_arquivo])}}" type="video/mp4">


            {{ for i, lg in enumerate(lista_legendas): }}

              <track
                     label="{{=lng.get(lg['lingua'], "-") }}"
                    kind="subtitles"
                    srclang="{{=lg['lingua']}}"
                    src="{{=URL('static','files', args=[lg['srt']])}}/"

                     {{= "default" if i == 0 else "" }}
                     />


            {{ pass }}

                Your browser does not support the video tag.
            {{ if tipo_media == 'A':}}
                </audio>
            {{ elif tipo_media == 'V' : }}
               </video>

            {{ pass}}

               <div id="subtitles" class="outlined-text aumentar-fonte filha"></div>





        </div>


        {{ if lista_legendas:}}


            <select id="tamanhoSelect">
                <option value="1.5">1.5</option>
                <option value="2.0">2.0</option>
                <option value="2.5">2.5</option>
                <option value="3.0">3.0</option>
                <option value="3.5">3.5</option>
                <option value="3.8">3.8</option>
            </select>

            <select id="corSelect">
                <option value="yellow" style="background-color: yellow; color: black;">Amarelo</option>
                <option value="blue" style="background-color: blue; color: white;">Azul</option>
                <option value="green" style="background-color: green; color: white;">Verde</option>
                <option value="white" style="background-color: white; color: black;">Branco</option>
            </select>



            <select id="legSelect">
                <option value="" style="background-color: yellow; color: black;">Sem Legendas</option>
            {{ for lg in lista_legendas: }}
                  <option value="{{=lg['srt'] }}" style="background-color: yellow; color: black;">{{=lng.get(lg['lingua'], "-") }}</option>
            {{ pass }}
            </select>

            <span></span>
        {{ pass }}

        <style>

                    .yellow::cue {
                      color: #ffff1b;
                      background-color: #000;
                    }

                    .white::cue {
                      color: #fff;
                      background-color: #000;
                    }


                    .blue::cue {
                      color: #036ffc;
                      background-color: #fff;
                    }

                    .tam15::cue{
                       font: 1.5rem;

                    }


                    .tam20::cue{
                       font-size:: 2em;

                    }

                    .tam25::cue{
                       font-size:: 2.5em;

                    }

                    .tam30::cue{
                       font-size:: 3em;

                    }

                    video::cue {
                        /* Ajuste o tamanho da fonte conforme necessário */
                        font-size: 36px;

                        /* Outras propriedades de estilo podem ser adicionadas conforme necessário */
                        color: #000; /* Cor do texto */
                        background-color: #fff; /* Cor de fundo da legenda */
                        /* Adicione mais propriedades conforme necessário */
                    }



        </style>


        <script>
            var vdd = document.getElementById('myVideo');



            // Flag para controlar se o play foi pressionado pela primeira vez
            var primeiraVezPlay = true;

            // Adiciona um evento 'play' ao elemento de áudio
            vdd.addEventListener('play', function() {
                if (primeiraVezPlay) {
                    console.log("Play pressionado pela primeira vez!");

                    // Faz o que precisa ser feito na primeira vez que o play é pressionado
                    // Por exemplo, enviar dados para um servidor, atualizar uma interface, etc.
                    web2py_component('/init/media/views_count/'+{{=request.args(0)}}, "contou")
                    // Atualiza a flag para que este código não seja executado novamente
                    primeiraVezPlay = false;
                }
            });



            // Carregar legendas
            function loadSubtitles(arquivo) {
            //debugger;
            var partesDoCaminho = arquivo.toUpperCase().split('.');

            // Pega a última parte resultante (que deve ser a extensão do arquivo)
            var extensaoDoArquivo = partesDoCaminho[partesDoCaminho.length - 1];


                $.ajax({
                    url:"{{=URL('static','files')}}/" + arquivo ,
                    dataType: 'text',
                    success: function (data) {
                        const subtitles =  parseSubtitles(data, extensaoDoArquivo);
                        displaySubtitles(subtitles);
                    }
                }).fail(function(jqXHR, textStatus, errorThrown) {
                   // Capturar e lidar com erros aqui
                    console.error("Erro na requisição Ajax: " + textStatus, errorThrown);
                 });
            }

            // Analisar legendas SRT
            function parseSubtitles(data, extensaoDoArquivo) {
                var subtitles = [];
                var lines = data.split('\n');
                var startTime, endTime, text;

                const indexRegex = /^\d+/   ;

                var timeRegex = /(?<start>\d{2}:\d{2}:\d{2}\.\d{3})\s-->\s(?<end>\d{2}:\d{2}:\d{2}\.\d{3})/;

                //debugger;
                if(extensaoDoArquivo=="SRT"){
                    var timeRegex = /(?<start>\d{2}\:\d{2}\:\d{2},\d{3})\s-->\s(?<end>\d{2}\:\d{2}\:\d{2},\d{3})/;
                }else if(extensaoDoArquivo=="VTT"){
                    var timeRegex = /(?<start>\d{2}:\d{2}:\d{2}\.\d{3})\s-->\s(?<end>\d{2}:\d{2}:\d{2}\.\d{3})/;
                }

                var currentLine = 0;
                while(currentLine < lines.length - 1) {
                    line = lines[currentLine];
                    nextLine = lines[currentLine + 1];

                    //debugger;
                    if(extensaoDoArquivo=="SRT"){
                        indexMatch = line.match(indexRegex);
                        timeMatch = nextLine.match(timeRegex);


                        if ((indexMatch) && (timeMatch)) {
                            startTime = timeMatch[1];
                            endTime = timeMatch[2];
                            text = "";
                            currentLine += 1;
                            nextTextIndex = currentLine + 1;
                            nextTextLine = lines[nextTextIndex];
                            while (nextTextLine.trim() !== '') {
                                text = text + (text.length > 0 ? '\n' : '') + nextTextLine;
                                nextTextIndex += 1;
                                nextTextLine = lines[nextTextIndex];
                                currentLine += 1;
                            }

                            subtitles.push(
                                {
                                    startTime: startTime,
                                    endTime: endTime,
                                    text: text
                                }
                            );
                        }
                    }else if(extensaoDoArquivo=="VTT"){

                        timeMatch = nextLine.match(timeRegex);


                        if ((timeMatch)) {
                            startTime = timeMatch[1];
                            endTime = timeMatch[2];
                            text = "";
                            currentLine += 1;
                            nextTextIndex = currentLine + 1;
                            nextTextLine = lines[nextTextIndex];
                            while (nextTextLine.trim() !== '') {
                                text = text + (text.length > 0 ? '\n' : '') + nextTextLine;
                                nextTextIndex += 1;
                                nextTextLine = lines[nextTextIndex];
                                currentLine += 1;
                            }

                            subtitles.push(
                                {
                                    startTime: startTime,
                                    endTime: endTime,
                                    text: text
                                }
                            );
                        }

                    }

                    currentLine += 1;
                }

                return subtitles;
            }




            // Verificar se o navegador suporta o modo de tela cheia
            if (vdd) {
                if (vdd.requestFullscreen) {
                    // Adiciona ouvinte de evento quando entrar em tela cheia
                    vdd.addEventListener('fullscreenchange', function() {
                        if (document.fullscreenElement) {
                            console.log('Entrou em tela cheia');
                            // Coloque aqui o código que deseja executar quando entrar em tela cheia
                        } else {
                            console.log('Saiu de tela cheia');
                            // Coloque aqui o código que deseja executar quando sair de tela cheia
                        }
                    });
                } else if (vdd.mozRequestFullScreen) {
                    // Para Firefox
                    vdd.addEventListener('mozfullscreenchange', function() {
                        if (document.mozFullScreen) {
                            console.log('Entrou em tela cheia no Firefox');
                        } else {
                            console.log('Saiu de tela cheia no Firefox');
                        }
                    });
                } else if (vdd.webkitRequestFullscreen) {
                    // Para Chrome, Safari e Opera
                    vdd.addEventListener('webkitfullscreenchange', function() {
                        if (document.webkitFullscreenElement) {
                            console.log('Entrou em tela cheia no Chrome/Safari/Opera');
                        } else {
                            console.log('Saiu de tela cheia no Chrome/Safari/Opera');
                        }
                    });
                }
            }





            // Exibir legendas durante a reprodução
            function displaySubtitles(subtitles) {
                //degbugger;
                var video = document.getElementById('myVideo');
                var subtitlesDiv = $('#subtitles');
                video.addEventListener('timeupdate', function ( ){

                    var currentTime = video.currentTime;
                    console.log(currentTime);
                    for (var i = 0; i < subtitles.length; i++) {
                        if (currentTime >= parseTime(subtitles[i].startTime) && currentTime <= parseTime(subtitles[i].endTime)) {
                            var lgd = subtitles[i].text;
                            //console.log(lgd);
                            console.log(lgd);
                            subtitlesDiv.text(lgd);
                            return;
                        }
                    }
                    // subtitlesDiv.text('');
                });
            }

            // Função auxiliar para converter o formato de tempo das legendas
            function parseTime(timeString) {
                var parts = timeString.split(':');
                var hours = parseInt(parts[0], 10);
                var minutes = parseInt(parts[1], 10);
                var seconds = parseFloat(parts[2].replace(',', '.'));
                return hours * 3600 + minutes * 60 + seconds;
            }



            $('#legSelect').change(function() {
                var arquivo = $(this).val();
                loadSubtitles(arquivo);
            });


            // Carregar legendas ao carregar a página
            $(document).ready(function () {

                var arquivo = $('#legSelect option:selected').val();




                loadSubtitles(arquivo);

                $(".filha").draggable({
                    containment: ".mae"
                });


                $("#tamanhoSelect").change(function() {
                    var selectedValue = $(this).val();
                    $("#subtitles").css("font-size", selectedValue + "em");

                });

                $("#tamanhoSelect, #corSelect").change(function() {
                    var tamanhoSelecionado = $("#tamanhoSelect").val();
                    var corSelecionada = $("#corSelect").val();

                    $("#subtitles").css({
                        "font-size": tamanhoSelecionado + "em",
                        "color": corSelecionada
                    });


                 $('#myVideo').removeClass('yellow white blue').addClass(corSelecionada);

                    var classtam = "tam" + tamanhoSelecionado.replace('.', '');
                    console.log(classtam);
                    $('#myVideo').removeClass('tam15 tam20').addClass(classtam);

                });

                $("#tamanhoSelect, #corSelect").change();

                videoWidth = $("#myVideo").width();
                $("#subtitles").css("max-width", videoWidth + "px");

              });
        </script>


        {{ elif tipo_media == 'S' : }}

            <div class="fs-1 mb-4">
                <a class="bi bi-spotify" href="{{=link}}" > Abrir direto no Spotify</a>
            </div>
            <br>

            <iframe style="border-radius:12px"
                     src="https://open.spotify.com/embed/episode/{{=spotify_episode}}/video?utm_source=generator"
                     width="100%"
                     height="400"
                     id="SpotifyIframe"
                     frameBorder="0"
                     allowfullscreen=""
                     allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                     loading="lazy">

            </iframe>

               
        
        

        {{ elif tipo_media == 'YT' : }}
             <iframe width="100%"
                       height="315" src="https://www.youtube.com/embed/{{=yt_episode}}"
                       title="YouTube video player"
                       frameborder="0"
                       allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

            </iframe>

        {{ elif tipo_media == 'L' : }}

        <a href="{{=link}}" target="_blank" class="btn btn-default btn-secondary">
            <i class="bi bi-link"></i>
            Link para o Shiur
            <i class="icon icon-play bi bi-play"></i>
        </a>
        <br><br>

        <script>
                    window.open(
                      "{{=link}}", "_blank");

        </script>


        {{ else: }}

            {{=tipo_media}}<br>
            {{=url_arquivo}}<br>
            {{=link}}


        {{ pass }}
   </div>
    <div  class="col-lg-7  col-md-7 col-sm-12   col-xs-12">
        <h4>

            {{if foto_palestrantre:}}
             <img src="{{=URL('static','files', args=foto_palestrantre)}}" class="img-circle" width="120" HEIGHT="120" >
            {{ pass }}


            {{=nome_palestrantre}}
        </h4>
        <h2>
            {{=titulo }}
        </h2>

        <span>{{=time_uploaded.strftime("%d/%m/%Y %H:%M")}}</span>
        <h4>
            Resenha
        </h4>
        <div>
          {{=resenha or "-"}}
        </div>

        
        <div class="row">
            <div class="col-md-2">
                <div id="voting-container"  style="position: relative;">
                    <!-- Botão de Votação -->
                     <div id="vote-button">

                    {{=LOAD(c='toca',f='load_votes', args=[request.args(0)], ajax=True ) }}
                    </div>

                    {{media_id = request.args(0)}}
                    <!-- Opções de Votação -->
                    <div id="voting-options" style="display: none; position: absolute;">
                        <button class="vote-option" data-content-id="{{=media_id}}" data-vote-type="like"><i class="bi bi-hand-thumbs-up"></i></button>
                        <button class="vote-option" data-content-id="{{=media_id}}" data-vote-type="heart"><i class="bi bi-heart"></i></button>
                        <button class="vote-option" data-content-id="{{=media_id}}" data-vote-type="bomb"><i class="bi bi-lightning-charge-fill"></i></button>
                        <button class="vote-option" data-content-id="{{=media_id}}" data-vote-type="must"><i class="bi bi-asterisk"></i></button>
                    </div>
                </div>
            </div>
           <div class="col-md-1">
               {{=LOAD(c='toca',f='load_views', args=[request.args(0)], ajax=True ) }}
            </div>
        </div>
        <!-- Contêiner do Sistema de Votação -->



        <div id="commentForm">
            <label for="nameField">Nome:</label>
            <input type="text" id="nameField" name="name" placeholder="Seu nome" required>

            <label for="commentField">Comentário:</label>
            <textarea id="commentField" name="comment" placeholder="Escreva seu comentário" required  rows="3"></textarea>
            <div id="charCount">0/500</div>
            <button type="submit" id="submitButton">Enviar Comentário</button>
        </div>


        <div id="lista_coments" >
          {{=LOAD('toca','lista_coments', args=[request.args(0)], target='lista_coments', ajax=True) }}


        </div>


    </div>
</div>
<style>

.img-circle {
    border-radius: 50%
}




#commentForm label {
    display: block;
    margin-top: 20px;
}

#commentForm input, #commentForm textarea {
    width: 100%;
    padding: 10px;
    margin: 5px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-family: Arial, sans-serif;
    font-size: 14px;
    background-color: #f8f8f8; /* Cor de fundo clara */
    color: #333; /* Cor do texto */
}

#commentForm textarea {
    --height: 150px;
}

#commentForm button {
    background-color: #4CAF50; /* Cor de fundo verde */
    color: white; /* Texto branco */
    padding: 10px 20px;
    margin: 10px 0;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}

#commentForm button:hover {
    background-color: #45a049; /* Verde um pouco mais escuro */
}



</style>

<script>

    $('#submitButton').hide();
    var maxLength = 500;

    function checkFields() {
        var nameLength = $('#nameField').val().length;
        var commentLength = $('#commentField').val().length;

        if (nameLength < 3 || commentLength < 3) {
            $('#submitButton').hide();
        } else {
            $('#submitButton').show();
        }

        $('#charCount').text(`${commentLength}/${maxLength}`);

        $('#commentField').css('height', 'auto');
        $('#commentField').css('height', $(this).prop('scrollHeight'));

    }

    $('#nameField, #commentField').on('input', checkFields);

    document.getElementById('commentForm').addEventListener('submit', function(event) {
        var name = document.getElementById('nameField').value;
        var comment = document.getElementById('commentField').value;

        if (name.trim() === '' || comment.trim() === '') {
            alert('Por favor, preencha todos os campos.');
            event.preventDefault(); // Evitar o envio do formulário
        }
    });


    $('#submitButton').click(function(){
        var coment = $("#commentField").val();
        var nome = $("#nameField").val();
        var media_id = "{{=request.args(0)}}";
        ;
        //alert("coment " + coment + ", nome " + nome + ", media_id " + media_id );
        $.ajax({
            type: 'POST',
            url: "{{=URL('media','comentar',args=[request.args(0)])}}" ,// Substitua com a URL do seu servidor
            data: {'coment':coment, 'nome':nome, 'media_id': media_id }, // Serializa os dados do formulário
            success: function(response){
                // Trate aqui o sucesso da resposta
                console.log('Comentário enviado com sucesso!');

                $("#commentField").val('');
                $("#nameField").val('');

                checkFields();

                web2py_component("{{=URL('toca','lista_coments', args=[request.args(0)])}}", 'lista_coments')


            },
            error: function(){
                // Trate aqui os erros da resposta
                console.log('Erro ao enviar o comentário.');
            }
        });
    });

</script>
