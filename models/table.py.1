# -*- coding: utf-8 -*-

# >>> db.define_table('mytable', Field('myfield', 'string'))
#
# Fields can be 'string','text','password','integer','double','boolean'
#       'date','time','datetime','blob','upload', 'reference TABLENAME'
# There is an implicit 'id integer autoincrement' field
# Consult manual for more options, validators, etc.

from datetime import datetime
#from images import THUMB
import os
import geopy.distance

noam_geo = (-23.539302,-46.660755) # BY
# noam_geo =(-23.563700, -46.664169) # iavne

#SÃ£o Paulo - SP, 01229-001
#-23.539302, -46.660777

def calcula_dist(x,y):
    return geopy.distance.distance((x ,y),noam_geo).km


db.define_table('aula',
                Field('nome', 'string'),
                Field('horario', 'time'),
                Field('obs', 'text'),
                format='%(nome)s'
                )

"""
db.define_table('pessoa',
             Field('nome', 'string'),
             Field('funcao', 'string',
                   requires=IS_IN_SET([("RV","RAV"),("AL","ALUNO"),("KL","KOLEL")]),
                   default='AL'),
             Field('cel', 'string'),
             Field('entrada', 'date', default=datetime.today()),
             Field('milga', 'float', default=0.0),
             Field('ativo', 'boolean', default=True),
             Field('ativo', 'boolean', default=True),
             Field('aniversario', 'date'),
             Field('foto', 'upload'),
             Field('aulas', 'list:reference aula'),
             Field('documento', 'upload'),
             Field('obs', 'text'),
             format='%(nome)s',
              )
"""

db.define_table('feriado',
                Field('nome', 'string'),
                Field('data_feriado', 'date'),
                Field('tipo', 'string',
                   requires=IS_IN_SET([("LC","Laico"),("JD","Judaico"),("FR","Ferias")]),
                   default='LC'),
                Field('obs', 'string'),
                )


db.define_table('presenca',
                Field('pessoa', db.auth_user),
                Field('aula', db.aula),
                Field('dia', 'date'),
                Field('horario', 'time'),
                Field('horario_fim', 'time'),
                Field('valor', 'double'),
                Field('geo_x', 'double', default=0.0),
                Field('geo_y', 'double', default=0.0),
                Field('geo_distancia', 'double',
                      compute=lambda r:calcula_dist(r['geo_x'] , r['geo_y']),
                      represent= lambda n, r: "{} km".format(round(n or 0.0, 2)),
                     ),
                Field('doc_pago', 'integer'),
                )


db.define_table('conteudo',
                Field('tipo', 'string',requires=IS_IN_SET([("CR","Carrossel"),("MK","Marketing"),("FT","Featurette")])),
                Field('lancado', 'datetime', default=datetime.now()),
                Field('titulo', 'string'),
                Field('resumo', 'text', requires=IS_LENGTH(160, error_message="Texto muito grande, max 160 caracteres.")),
                Field('texto', 'text'),
                Field('link', 'string'),
                # Field('imagem', 'upload', uploadfolder=os.path.join(request.folder, 'static/images/albums/image.file/')),
                Field('imagem', 'upload'),
                Field('thumbnail', 'upload'),
                Field('alinhamento', 'string',requires=IS_IN_SET([("E","Esquerda"),("C","Centro"),("D","Direita")]), default="C"),
                Field('ativo', 'boolean', default=True),
                Field('texto_escuro', 'boolean', default=False),
                )

from smthumbs import SMARTHUMB

box = (200, 200)

db.conteudo.thumbnail.compute = lambda row: SMARTHUMB(row.imagem, box)
